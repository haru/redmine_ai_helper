<%
  project = @wiki&.project || @project
%>
<% if params[:controller] == 'wiki' && params[:action] == 'edit' && 
      project&.module_enabled?(:ai_helper) && 
      User.current.allowed_to?(:view_ai_helper, project) && 
      User.current.allowed_to?(:edit_wiki_pages, project) %>

<script>
function initializeWikiTypoChecker() {
  const wikiTextarea = document.getElementById('content_text');
  
  if (wikiTextarea && typeof AiHelperTypoChecker !== 'undefined') {
    const wikiTypoChecker = new AiHelperTypoChecker(wikiTextarea, {
      endpoint: '<%= ai_helper_check_typos_path(project) %>',
      labels: {
        suggestionsTitle: '<%= t('ai_helper.typo_check.suggestions_title') %>',
        noSuggestions: '<%= t('ai_helper.typo_check.no_suggestions') %>',
        checkButton: '<%= t('ai_helper.typo_check.check_button') %>',
        checking: '<%= t('ai_helper.typo_check.checking') %>',
        acceptSuggestion: '<%= t('ai_helper.typo_check.accept_suggestion') %>',
        dismissSuggestion: '<%= t('ai_helper.typo_check.dismiss_suggestion') %>',
        acceptAll: '<%= t('ai_helper.typo_check.accept_all') %>',
        dismissAll: '<%= t('ai_helper.typo_check.dismiss_all') %>',
        errorOccurred: '<%= t('ai_helper.typo_check.error_occurred') %>',
        correctionTooltip: '<%= t('ai_helper.typo_check.correction_tooltip') %>',
        applyFailed: '<%= t('ai_helper.typo_check.apply_failed') %>'
      }
    });
    wikiTypoChecker.init();
  }
}

document.addEventListener('DOMContentLoaded', initializeWikiTypoChecker);
</script>


<% end %>