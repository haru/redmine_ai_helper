
<% if (@project and @project.module_enabled?(:ai_helper) and User.current.allowed_to?({ controller: :ai_helper, action: :issue_summary }, @project) and AiHelperSetting.find_or_create.model_profile) %>


<%= javascript_tag do %>
  function getSummary(update) {
    var url = "<%= ai_helper_issue_summary_path(id: @issue.id)%>";
    if (update == true) {
      url += "?update=true";
    }

    const summaryArea = document.getElementById('ai-helper-summary-area');
    if (summaryArea) {
      summaryArea.innerHTML = '<div class="ai-helper-loader"></div>';
    }

    const xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.onload = function() {
      if (xhr.status === 200) {
        if (summaryArea) {
          summaryArea.innerHTML = xhr.responseText;
        }
      } else {
        if (summaryArea) {
          summaryArea.innerHTML = '<div class="error"><%= j l(:ai_helper_error_occurred) %>: ' + xhr.statusText + '</div>';
        }
      }
    };
    xhr.onerror = function() {
      if (summaryArea) {
        summaryArea.innerHTML = '<div class="error"><%= j l(:ai_helper_error_occurred) %></div>';
      }
    };
    xhr.send();
  };

  function generateSummaryStream() {
    ai_helper.generateSummaryStream(
      "<%= ai_helper_generate_issue_summary_path(id: @issue.id) %>",
      '<%= j l(:ai_helper_error_occurred) %>'
    );
  }

  document.addEventListener('DOMContentLoaded', function() {
    const summaryButtons = document.querySelectorAll('.ai-helper-summary-button');
    summaryButtons.forEach(function(button) {
      button.addEventListener('click', function(e) {
        e.preventDefault();
        generateSummaryStream();
      });
    });
  });

  // Function to toggle the open/closed state of the fieldset
  // flag: true to expand, false to collapse
  function aiHelperSetSummayExpanded(flag) {
    const fieldset = document.getElementById('ai-helper-summary-fields');
    const legend = fieldset.querySelector('legend');
    isOpen = !fieldset.classList.contains('collapsed');
    if (isOpen !== flag) {
      toggleFieldset(legend);
    }
  };

  // Function to save the open/closed state of the fieldset
  function aiHelperSaveSummaryState() {
    const fieldset = document.getElementById('ai-helper-summary-fields');
    const isOpen = !fieldset.classList.contains('collapsed');
    localStorage.setItem('aiHelperIssueSummaryState', isOpen ? 'expanded' : 'collapsed');
  };


  // Function to find similar issues
  function findSimilarIssues() {
    const url = "<%= ai_helper_similar_issues_path(id: @issue.id) %>";
    const similarIssuesArea = document.getElementById('ai-helper-similar-issues-area');
    
    if (similarIssuesArea) {
      similarIssuesArea.innerHTML = '<div class="ai-helper-loader"></div>';
    }

    const xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.onload = function() {
      if (xhr.status === 200) {
        if (similarIssuesArea) {
          similarIssuesArea.innerHTML = xhr.responseText;
        }
      } else {
        if (similarIssuesArea) {
          similarIssuesArea.innerHTML = '<div class="error"><%= j l(:ai_helper_error_occurred) %>: ' + xhr.statusText + '</div>';
        }
      }
    };
    xhr.onerror = function() {
      if (similarIssuesArea) {
        similarIssuesArea.innerHTML = '<div class="error"><%= j l(:ai_helper_error_occurred) %></div>';
      }
    };
    xhr.send();
  };


  // Function to move similar issues section to after relations
  function moveSimilarIssuesToRelations() {
    const similarIssuesSection = document.getElementById('ai-helper-similar-issues-section');
    if (!similarIssuesSection) return;

    // Look for relations section
    const relationsDiv = document.getElementById('relations');
    if (relationsDiv) {
      // Insert after relations div
      relationsDiv.parentNode.insertBefore(similarIssuesSection, relationsDiv.nextSibling);
    }
  };

  // On page load, retrieve the state from localStorage and set the open/closed state of the fieldset
  document.addEventListener('DOMContentLoaded', function() {
    const savedState = localStorage.getItem('aiHelperIssueSummaryState');
    if (savedState === 'expanded') {
      aiHelperSetSummayExpanded(true);
    } else {
      aiHelperSetSummayExpanded(false);
    }

    // Move similar issues to relations area
    moveSimilarIssuesToRelations();
  });

<% end %>
<fieldset id="ai-helper-summary-fields" class="collapsible collapsed">
    <legend onclick="toggleFieldset(this);aiHelperSaveSummaryState();" class="icon icon-collapsed">
    <%= sprite_icon("angle-right") %>
    <strong>
        <%= sprite_icon("ai-helper-robot", plugin: :redmine_ai_helper)%>
        <%= l(:ai_helper_summary) %>
    </strong>
    </legend>
    <div class="ai-helper-issue-summary" style="display: none;">
      <%
        summary = AiHelperSummaryCache.issue_cache(issue_id: @issue.id)
      %>
      <div id="ai-helper-summary-area">
        <% if summary %>
        <script>
            document.addEventListener('DOMContentLoaded', function() {
              getSummary();
            });
        </script>
        <% else %>
        <%= link_to l(:ai_helper_summary), '#', class: 'ai-helper-summary-button', id: 'ai-helper-summary-button', onclick: 'generateSummaryStream(); return false;' %>
        <% end %>

      </div>
    </div>

</fieldset>

<% end %>

<% if (@project and @project.module_enabled?(:ai_helper) and User.current.allowed_to?({ controller: :ai_helper, action: :similar_issues }, @project) and AiHelperSetting.find_or_create.model_profile and AiHelperSetting.vector_search_enabled?) %>
<div id="ai-helper-similar-issues-section" style="border-top: 1px solid #ccc; padding-top: 10px; margin-top: 10px;">
    <div class="contextual">
    </div>
    <%= link_to '#', class: 'ai-helper-similar-issues-button icon icon-list', id: 'ai-helper-similar-issues-button', onclick: 'findSimilarIssues(); return false;', style: 'text-decoration: none; font-weight: bold; font-size: 14px;' do %>
        <%= sprite_icon("ai-helper-robot", plugin: :redmine_ai_helper)%>
        <%= l(:ai_helper_similar_issues) %>
    <% end %>
    <div id="ai-helper-similar-issues-area">
    </div>
</div>
<% end %>
