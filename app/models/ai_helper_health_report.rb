# Persisted project health reports generated by the AI Helper.
class AiHelperHealthReport < ApplicationRecord
  include Redmine::SafeAttributes

  belongs_to :project
  belongs_to :user

  # Validations
  validates :project_id, presence: true
  validates :user_id, presence: true
  validates :health_report, presence: true

  # Scopes
  scope :sorted, -> { order(created_at: :desc) }
  scope :visible, -> { includes(:project).where(projects: { status: Project::STATUS_ACTIVE }) }
  scope :for_project, ->(project_id) { where(project_id: project_id) }
  scope :by_user, ->(user_id) { where(user_id: user_id) }
  scope :recent, ->(limit = 10) { sorted.limit(limit) }

  # Accessor for metrics
  def metrics_hash
    return {} if metrics.blank?
    JSON.parse(metrics, symbolize_names: true) rescue {}
  end

  # Store metrics information as JSON on the report record.
  # @param hash [Hash] structured metrics payload to persist.
  def metrics_hash=(hash)
    self.metrics = hash.to_json
  end

  # Check if the report is visible to the user
  # @param user [User] The user to check visibility for
  # @return [Boolean] true if user is admin or a member of the project
  def visible?(user = User.current)
    return false unless project.present? && user.present?
    # Admin can view all reports, or user must be a member of the project
    user.admin? || user.member_of?(project)
  end

  # Check if the report can be deleted by the user
  # @param user [User] The user to check deletion rights for
  # @return [Boolean] true if user is admin or a member of the project
  def deletable?(user = User.current)
    return false unless project.present? && user.present?
    return true if user.admin?
    user.allowed_to?(:delete_ai_helper_health_reports, project)
  end

  # Check if this report can be compared with another report
  # @param other_report [AiHelperHealthReport] The report to compare against
  # @return [Boolean] true if comparable
  def comparable_with?(other_report)
    return false unless other_report.is_a?(AiHelperHealthReport)
    return false unless other_report.project_id == project_id
    return false if other_report.id == id
    true
  end

  # Get summary information for the report
  # @return [Hash] Summary information
  def summary_info
    {
      id: id,
      created_at: created_at,
      user_name: user.name,
      total_issues: metrics_hash.dig(:issue_statistics, :total_issues) || 0,
    }
  end
end
